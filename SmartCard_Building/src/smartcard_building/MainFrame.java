package smartcard_building;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

public class MainFrame extends javax.swing.JFrame {

    private SmartCard_Building host;

    static byte counter;            // count the wrong PIN code
    static Patient patient;

    private boolean input = false;
    private boolean isConnect_apdu = false;
    private boolean isConnect_user = false;             // input card action

    private String pin_code;

    private boolean isSickNoteExists = false;
    private boolean isBalanceExists = false;

    // APPLET CLA
    final static byte APPLET_CLA = (byte) 0x80;
    // INS case for card
    private static final byte INS_GET_PIN = (byte) 0x10;
    private static final byte CKECK_CARD_STATUS = (byte) 0x11;
    private static final byte UNBLOCK_CARD = (byte) 0x12;
    private static final byte RESET_CARD = (byte) 0x13;
    private static final byte CHECK_PIN = (byte) 0x14;
    private static final byte CHANGE_PIN = (byte) 0x15;

    private static final byte INITIALISE_PATIENT = (byte) 0x20;
    private static final byte GET_PATIENT_INFOR = (byte) 0x21;
    private static final byte UPDATE_PATIENT_INFOR = (byte) 0x22;
    private static final byte GET_PATIENT_SICKNOTE = (byte) 0x23;
    private static final byte SET_PATIENT_SICKNOTE = (byte) 0x24;
    private static final byte GET_PATIENT_BALANCE = (byte) 0x25;
    private static final byte SET_PATIENT_BALANCE = (byte) 0x26;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        patient = new Patient();
        host = new SmartCard_Building();
    }

    // display the APDU command data with paramenter on application
    public void displayTheApduCommandOnApp(byte[] commands, byte[] data, byte lc, byte le) {
        txtCLA.setText(host.atrToHex(commands[0]));
        txtINS.setText(host.atrToHex(commands[1]));
        txtP1.setText(host.atrToHex(commands[2]));
        txtP2.setText(host.atrToHex(commands[3]));
        txtLC.setText(host.atrToHex(lc));

        //data
        String temp = "";
        for (int i = 0; i < data.length; i++) {
            temp += host.atrToHex(data[i]);
            temp += " ";
        }
        txtApduData.setText(temp);
        txtLE.setText(host.atrToHex(le));
    }

    public void displayTheApduCommandOnApp_beta(byte[] commands, byte[] data, short lc, short le) {
        txtCLA.setText(host.atrToHex(commands[0]));
        txtINS.setText(host.atrToHex(commands[1]));
        txtP1.setText(host.atrToHex(commands[2]));
        txtP2.setText(host.atrToHex(commands[3]));
        txtLC.setText(host.shorttoHex(lc));
        //data
        String temp = "";
        for (int i = 0; i < data.length; i++) {
            temp += host.atrToHex(data[i]);
            temp += " ";
        }
        txtApduData.setText(temp);
        txtLE.setText(host.shorttoHex(le));
    }

    // display the APDU responses on application
    public void displayTheApduResponseOnApp(short le) {
        byte[] status = host.decodeStatus();//sw1 sw2
        txtSW1.setText(String.valueOf(host.atrToHex(status[0])));
        txtSW2.setText(String.valueOf(host.atrToHex(status[1])));
        byte[] dataOut = host.decodeDataOut();
        if (le != 0 && dataOut.length != 0) {
            // display the data out on app
            String temp = "";
            for (int i = 0; i < dataOut.length; i++) {
                temp += host.atrToHex(dataOut[i]);
                temp += " ";
            }
            txtResponseData.setText(temp);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtPatientCode = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBA = new javax.swing.JTextArea();
        txtBalance = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        btn_debit = new javax.swing.JButton();
        btn_Payment = new javax.swing.JButton();
        txtGender = new javax.swing.JTextField();
        txtDOB = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtHealthInsurance = new javax.swing.JTextField();
        btnUpdate_SickNote = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        avatar_image = new javax.swing.JLabel();
        btnUpdateInfor = new javax.swing.JButton();
        btnInputCard = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnChangePIN = new javax.swing.JButton();
        btnImageBrowser = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtCLA = new javax.swing.JTextField();
        txtINS = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtP1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtP2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtLC = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtLE = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtApduData = new javax.swing.JTextArea();
        btn_init_patient = new javax.swing.JButton();
        btnResetCard = new javax.swing.JButton();
        btnUnblockCard = new javax.swing.JButton();
        btnReleaseConnection = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        btn_SendPatientData = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtSW1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtSW2 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtResponseData = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        txtConnectStatus = new javax.swing.JTextField();
        txtReleaseStatus = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thẻ bệnh nhân", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Mã bệnh nhân:");

        txtPatientCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Họ và tên:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Ngày sinh:");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Quê quán:");

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Giới tính:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Bệnh án:");

        txtBA.setColumns(20);
        txtBA.setRows(5);
        jScrollPane1.setViewportView(txtBA);

        txtBalance.setEditable(false);
        txtBalance.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtBalance.setText("0");
        txtBalance.setToolTipText("");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel19.setText("Số dư:");

        btn_debit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_debit.setText("Nạp tiền");
        btn_debit.setToolTipText("");
        btn_debit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_debitActionPerformed(evt);
            }
        });

        btn_Payment.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_Payment.setText("Thanh toán");
        btn_Payment.setToolTipText("");
        btn_Payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PaymentActionPerformed(evt);
            }
        });

        txtGender.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtDOB.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDOBActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("Số BHYT:");

        txtHealthInsurance.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnUpdate_SickNote.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdate_SickNote.setText("Cập nhật bệnh án");
        btnUpdate_SickNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate_SickNoteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("VNĐ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 40, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(btn_debit, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_Payment, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnUpdate_SickNote, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                                .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9))
                            .addComponent(jLabel7)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtHealthInsurance)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                                    .addComponent(txtDOB)
                                    .addComponent(txtName)
                                    .addComponent(txtPatientCode)
                                    .addComponent(txtGender))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPatientCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtHealthInsurance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate_SickNote, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_debit, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Payment, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ảnh", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(avatar_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(avatar_image, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        );

        btnUpdateInfor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateInfor.setText("Cập nhật thông tin");
        btnUpdateInfor.setToolTipText("");
        btnUpdateInfor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateInforActionPerformed(evt);
            }
        });

        btnInputCard.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnInputCard.setForeground(new java.awt.Color(255, 51, 51));
        btnInputCard.setText("Đưa thẻ vào");
        btnInputCard.setToolTipText("");
        btnInputCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputCardActionPerformed(evt);
            }
        });

        btnChangePIN.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnChangePIN.setText("Đổi PIN");
        btnChangePIN.setToolTipText("");
        btnChangePIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePINActionPerformed(evt);
            }
        });

        btnImageBrowser.setText("Chọn ảnh");
        btnImageBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageBrowserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInputCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 87, Short.MAX_VALUE)
                        .addComponent(btnChangePIN, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(btnImageBrowser)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnInputCard, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChangePIN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnImageBrowser)
                        .addGap(34, 34, 34)
                        .addComponent(btnUpdateInfor, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "APDU Process", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "APDU commands", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("CLA");

        txtCLA.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtCLA.setText("00");
        txtCLA.setToolTipText("");
        txtCLA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCLAActionPerformed(evt);
            }
        });

        txtINS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtINS.setText("00");
        txtINS.setToolTipText("");
        txtINS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtINSActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("INS");

        txtP1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtP1.setText("00");
        txtP1.setToolTipText("");
        txtP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtP1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("P1");

        txtP2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtP2.setText("00");
        txtP2.setToolTipText("");
        txtP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtP2ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("P2");

        txtLC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtLC.setText("00");
        txtLC.setToolTipText("");
        txtLC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLCActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("LC");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("LE");

        txtLE.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtLE.setText("00");
        txtLE.setToolTipText("");
        txtLE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLEActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("Data:");

        txtApduData.setColumns(20);
        txtApduData.setRows(5);
        jScrollPane2.setViewportView(txtApduData);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtCLA, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtINS, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtP1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtP2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtLC, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtLE, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(139, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCLA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtINS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btn_init_patient.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_init_patient.setText("Init Card");
        btn_init_patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_init_patientActionPerformed(evt);
            }
        });

        btnResetCard.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnResetCard.setText("Reset Card");
        btnResetCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetCardActionPerformed(evt);
            }
        });

        btnUnblockCard.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUnblockCard.setText("Unblock Card");
        btnUnblockCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnblockCardActionPerformed(evt);
            }
        });

        btnReleaseConnection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReleaseConnection.setForeground(new java.awt.Color(255, 51, 51));
        btnReleaseConnection.setText("Release");
        btnReleaseConnection.setActionCommand("");
        btnReleaseConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReleaseConnectionActionPerformed(evt);
            }
        });

        btnConnect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnConnect.setForeground(new java.awt.Color(255, 0, 0));
        btnConnect.setText("Connect");
        btnConnect.setActionCommand("");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        btn_SendPatientData.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_SendPatientData.setText("Send Patient Data");
        btn_SendPatientData.setActionCommand("");
        btn_SendPatientData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SendPatientDataActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Applet Responses", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("SW1");

        txtSW1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSW1.setText("00");
        txtSW1.setToolTipText("");
        txtSW1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSW1ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("SW2");

        txtSW2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSW2.setText("00");
        txtSW2.setToolTipText("");
        txtSW2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSW2ActionPerformed(evt);
            }
        });

        txtResponseData.setColumns(20);
        txtResponseData.setRows(5);
        jScrollPane4.setViewportView(txtResponseData);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("Data:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(132, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtSW1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtSW2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(250, 250, 250))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSW1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSW2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        txtConnectStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtReleaseStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_init_patient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_SendPatientData))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUnblockCard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnResetCard, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReleaseConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtConnectStatus)
                            .addComponent(txtReleaseStatus))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_init_patient, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnResetCard, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtConnectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReleaseConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUnblockCard, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_SendPatientData, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReleaseStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCLAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCLAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCLAActionPerformed

    private void txtINSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtINSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtINSActionPerformed

    private void txtP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtP1ActionPerformed

    private void txtP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtP2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtP2ActionPerformed

    private void txtLCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLCActionPerformed

    private void txtLEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLEActionPerformed

    private void txtSW1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSW1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSW1ActionPerformed

    private void txtSW2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSW2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSW2ActionPerformed

    private void btn_debitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_debitActionPerformed
        // TODO add your handling code here:

        // click to "nạp tiền" button
        if (isConnect_apdu == true) {
            JPanel panel = new JPanel();
            JLabel label = new JLabel("Nhập số tiền nạp:");

            JTextField inputMoneyText = new JTextField(18);

//            JLabel show_validation_input = new JLabel("");
//            show_validation_input.setForeground(Color.red);
//            show_validation_input.setBounds(30, 88, 211, 14);
//            inputMoney.addKeyListener(new KeyAdapter() {
//                @Override
//                public void keyPressed(KeyEvent e) {
//                    try {
//                        int i = Integer.parseInt(inputMoney.getText());
//                        show_validation_input.setText("");
//                    } catch(NumberFormatException er) {
//                        show_validation_input.setText("Invalid number.");
//                    }
//                }
//            });
//            panel.add(show_validation_input);
            panel.add(label);
            panel.add(inputMoneyText);

            String[] options = new String[]{"Xác nhận", "Hủy bỏ"};
            int option = JOptionPane.showOptionDialog(null, panel, "Nạp tiền",
                    JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[1]);
            if (option == 0) // pressing OK button
            {
                try {
                    int inputMoney = Integer.parseInt(inputMoneyText.getText());
                    //String inputMoney = inputMoneyText.getText();
                    //System.out.println("inputMoney" + inputMoney);

                    int oldBalance = patient.getSoDu();
                    int newBalance = oldBalance + inputMoney;

                    // save balance to patient object
                    patient.setSoDu(newBalance);
                    // update balance to applet
                    update_patient_balance();

                    DecimalFormat formatter = new DecimalFormat("###,###,###");
                    txtBalance.setText(formatter.format(newBalance));

                    isBalanceExists = true;

                } catch (NumberFormatException er) {
                    JOptionPane.showMessageDialog(null, "Số tiền nhập vào KHÔNG đúng.");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ và xác thực mã PIN!");
        }

    }//GEN-LAST:event_btn_debitActionPerformed

    private void btnUpdateInforActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateInforActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            update_patient_information();
        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ và xác thực mã PIN!");
        }
    }//GEN-LAST:event_btnUpdateInforActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        // Connect to card button action
        if (!isConnect_apdu) {

//            counter = 3;
            // CLA INS P1 P2 LC [DATA] LE
            // 0x00 0xA4 0x04 0x00 0X06 0XE1 0X69 0X8A 0XA1 0XB3 0X9C 0x7F;
            byte lengthDataField = 6;
            byte maxDataBytesExpected = 0;
            byte instParam_P1 = 0x04;
            byte instParam_P2 = 0x00;

            // connect
            host.establishConnectionToSimulator();
            host.pwrUp();

            // set the header CLA INS P1 P2
            // apdu header:     CLA INS P1 P2
            byte[] cmnds = {(byte) 0x00, (byte) 0xA4, instParam_P1, instParam_P2};
            host.setTheAPDUCommands(cmnds);
            host.setTheDataLength(lengthDataField);                 //LC 

            //aid/E1698AA1B3/9C
            byte[] data = {(byte) 0xE1, (byte) 0x69, (byte) 0x8A, (byte) 0xA1, (byte) 0xB3, (byte) 0x9C};

            host.setTheDataIn(data);                                // send data to applet
            host.setExpectedByteLength(maxDataBytesExpected);       //LE

            //display the data command on app
            displayTheApduCommandOnApp(cmnds, data, lengthDataField, maxDataBytesExpected);

            // receive responses data
            host.exchangeTheAPDUWithSimulator();
            host.decodeStatus();                                    //sw1 sw2

            // show data to app
            displayTheApduResponseOnApp(maxDataBytesExpected);

            txtConnectStatus.setText("Connected");
            txtReleaseStatus.setText("");

            this.isConnect_apdu = true;
        } else {
            JOptionPane.showMessageDialog(null, "Bạn đã kết nối APDU card rồi");
        }

    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnReleaseConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReleaseConnectionActionPerformed
        // button to release the apdu connection
        if (isConnect_apdu == true) {
            host.pwrDown();
            host.closeConnection();
            this.isConnect_apdu = false;
            this.isConnect_user = false;
            txtName.setText("");
            txtDOB.setText("");
            txtAddress.setText("");
            txtGender.setText("");
            txtHealthInsurance.setText("");
            txtPatientCode.setText("");
            txtBA.setText("");
            txtBalance.setText("");

            txtApduData.setText("");
            txtSW1.setText("");
            txtSW2.setText("");
            txtResponseData.setText("");
            txtCLA.setText("");
            txtINS.setText("");
            txtP1.setText("");
            txtP2.setText("");
            txtLC.setText("");
            txtLE.setText("");

            txtConnectStatus.setText("");
            txtReleaseStatus.setText("Release");
            JOptionPane.showMessageDialog(null, "Ngắt kết nối thành công!");

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btnReleaseConnectionActionPerformed

    private void btn_PaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PaymentActionPerformed
        // TODO add your handling code here:
        // payment 

        // click to "thanh toán" button
        if (isConnect_apdu == true) {
            JPanel panel = new JPanel();
            JLabel label = new JLabel("Nhập số tiền cần thanh toán:");

            JTextField inputMoneyText = new JTextField(18);
            panel.add(label);
            panel.add(inputMoneyText);

            String[] options = new String[]{"Thanh toán", "Hủy bỏ"};
            int option = JOptionPane.showOptionDialog(null, panel, "Thanh toán",
                    JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[1]);
            if (option == 0) // pressing OK button
            {
                try {
                    int paymentMoney = Integer.parseInt(inputMoneyText.getText());
                    int oldBalance = patient.getSoDu();
                    int newBalance = oldBalance - paymentMoney;

                    if (newBalance < 0) {
                        JOptionPane.showMessageDialog(null, "Số dư KHÔNG đủ để thanh toán!");
                    } else {
                        // save balance to patient object
                        patient.setSoDu(newBalance);
                        // update balance to applet
                        update_patient_balance();

                        DecimalFormat formatter = new DecimalFormat("###,###,###");
                        txtBalance.setText(formatter.format(newBalance));

                        isBalanceExists = true;
                    }

                } catch (NumberFormatException er) {
                    JOptionPane.showMessageDialog(null, "Số tiền nhập vào KHÔNG đúng.");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ và xác thực mã PIN!");
        }


    }//GEN-LAST:event_btn_PaymentActionPerformed

    private void btnUnblockCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnblockCardActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            short datalen = 1;                                                      // data len send to applet
            short maxdata_expect = 0;                                               // expect data len to be received (Le)
            byte[] cmd = {APPLET_CLA, UNBLOCK_CARD, (byte) 0x00, (byte) 0x00};
            host.setTheAPDUCommands(cmd);                                           //set APDU header
            host.setTheDataLengthShort(datalen);                                    // LC

            // data sender is RID,PIX
            byte[] data_u = {(byte) 0};
            host.setTheDataIn(data_u);
            // host.setExpectedByteLength(maxdata_expect);//LE
            host.setExpectedShortLength(maxdata_expect);
            displayTheApduCommandOnApp_beta(cmd, data_u, datalen, maxdata_expect);  // display data send to Applet on App
            host.exchangeTheAPDUWithSimulator();                                    // receive response data
            host.decodeStatus();                                                    // sw1 sw2
            displayTheApduResponseOnApp(maxdata_expect);                            // display response data on App

            JOptionPane.showMessageDialog(null, "Thẻ đã được mở khóa.");

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btnUnblockCardActionPerformed

    private void btnInputCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputCardActionPerformed
        // TODO add your handling code here:
        // user input the card and start provide PIN code

        // Connect to card button action
        if (isConnect_apdu == true) {
            if (check_isBlock_card() == false) {
                if (!isConnect_user) {
                    counter = 3;

                    JPanel panel = new JPanel();
                    JLabel label = new JLabel("Nhập mã PIN:");
                    JPasswordField pass = new JPasswordField(6);
                    panel.add(label);
                    panel.add(pass);
                    String[] options = new String[]{"Xác nhận", "Hủy bỏ"};

                    while (counter > 0) {
                        counter--;

                        int option = JOptionPane.showOptionDialog(null, panel, "Nhập mã PIN",
                                JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                                null, options, options[1]);

                        if (option == 0) // pressing OK button
                        {
                            char[] password = pass.getPassword();
                            String pin = Arrays.toString(pass.getPassword());

                            this.pin_code = pin;
                            //System.out.println("Your password is: " + pin_code);

                            if (check_PIN_code() == true) {
                                this.isConnect_user = true;
                                JOptionPane.showMessageDialog(null, "Mã PIN đúng.");

                                get_patient_information();

                                break;
                            } else if (counter == 0) {
                                JOptionPane.showMessageDialog(null, "Bạn đã hết số lần nhập sai. Thẻ của bạn đã bị KHÓA. Liên hệ quản trị để mở khóa.");
                            } else {
                                JOptionPane.showMessageDialog(null, "Mã PIN sai. Vui lòng nhập lại.");
                            }
                        } else {
                            break;
                        }
                        // end while
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Bạn đã kết nối tới thẻ rồi.");  // user_connection == true
                }
            } else {
                JOptionPane.showMessageDialog(null, "Thẻ đang bị khóa! Liên hệ nhà quản trị để mở khóa thẻ.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btnInputCardActionPerformed

    private void btnChangePINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePINActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            JPasswordField oldPIN = new JPasswordField();
            JPasswordField newPIN = new JPasswordField();
            Object[] message = {
                "PIN cũ:", oldPIN,
                "PIN mới:", newPIN
            };
            int option = JOptionPane.showConfirmDialog(null, message, "Đổi mã PIN", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

            if (option == 0) // pressing OK button
            {
                String old_pin = Arrays.toString(oldPIN.getPassword());
                String new_pin = Arrays.toString(newPIN.getPassword());

                //System.out.println("new pin: " + new String(new_pin));
                //System.out.println("this pin length: " + this.pin_code.length());
                //System.out.println("new pin length: " + new_pin.length());
                // check if old pin is ok
                if (old_pin.equals(this.pin_code)) {
//                JOptionPane.showMessageDialog(null, "Mã PIN đúng.");
                    this.pin_code = new_pin;

                    if (change_pin() == true) {
                        JOptionPane.showMessageDialog(null, "Đã đổi mã PIN thành công!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Có vấn đề khi đổi mã PIN dưới applet!");
                    }

                } else if (new_pin.length() != 18) {
                    JOptionPane.showMessageDialog(null, "Mã PIN phải có 6 ký tự là SỐ!");
                } else {
                    JOptionPane.showMessageDialog(null, "Mã cũ PIN sai. Vui lòng nhập lại.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ và xác thực mã PIN!");
        }
    }//GEN-LAST:event_btnChangePINActionPerformed

    private void btn_init_patientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_init_patientActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            if (input == false) {
                PatientFrame ptf = new PatientFrame();
                ptf.setVisible(true);
                ptf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } else {
                JOptionPane.showMessageDialog(null, "Thẻ đã được sử dụng rồi (đã có data).");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btn_init_patientActionPerformed

    private void btnResetCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetCardActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            input = false;

            isConnect_user = false;

            isSickNoteExists = false;
            isBalanceExists = false;

            counter = 3;
            short datalen = 1;                                                      // Status of the card (block or not)
            short maxdata_expect = 0;                                               // data expect receive (Le)

            byte[] cmd = {APPLET_CLA, RESET_CARD, (byte) 0x00, (byte) 0x00};
            host.setTheAPDUCommands(cmd);                                           //set APDU header
            host.setTheDataLengthShort(datalen);                                    //LC

            byte[] data_u = {(byte) 0};
            host.setTheDataIn(data_u);
            host.setExpectedShortLength(maxdata_expect);

            // display data apdu on app
            displayTheApduCommandOnApp_beta(cmd, data_u, datalen, maxdata_expect);

            // receive data apdu from applet
            host.exchangeTheAPDUWithSimulator();
            host.decodeStatus();                    //sw1 sw2

            // display apdu response on app
            displayTheApduResponseOnApp(maxdata_expect);

            txtPatientCode.setText("");
            txtName.setText("");
            txtDOB.setText("");
            txtAddress.setText("");
            txtGender.setText("");
            txtBA.setText("");
            txtHealthInsurance.setText("");
            txtBalance.setText("");

            JOptionPane.showMessageDialog(null, "Đã làm mới lại dữ liệu trong thẻ. Hãy thêm dữ liệu mới cho thẻ.");

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btnResetCardActionPerformed

    private void btn_SendPatientDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SendPatientDataActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            if (input == false) {
                // send data to applet
                String maPIN = patient.getMaPIN();
                String mabenhnhan = patient.getMaBenhNhan();
                String hoten = patient.getHoten();
                String ngaysinh = patient.getNgaysinh();
                String gioitinh = patient.getGioitinh();
                String soBHYT = patient.getSoBHYT();
                String quequan = patient.getQuequan();

                String dataArraySender = mabenhnhan.concat("#")
                        .concat(hoten).concat("#")
                        .concat(ngaysinh).concat("#")
                        .concat(gioitinh).concat("#")
                        .concat(soBHYT).concat("#")
                        .concat(quequan).concat("#")
                        .concat(maPIN);

                System.out.println(dataArraySender);
                int sender_len = dataArraySender.length();

                byte datalen = (byte) sender_len;                                   // data len which send to applet
                byte maxdata_expect = 127;                                          // data expect receive max length (Le)
                byte[] cmd = {APPLET_CLA, INITIALISE_PATIENT, (byte) 0x00, (byte) 0x00};

                host.setTheAPDUCommands(cmd);                                       //set APDU header
                host.setTheDataLength(datalen);                                     //LC

                // sender data array == RID,PIX
                byte[] data = dataArraySender.getBytes();
                host.setTheDataIn(data);                                            // start send data to applet
                host.setExpectedByteLength(maxdata_expect);                         //LE

                // display data on app
                displayTheApduCommandOnApp(cmd, data, datalen, maxdata_expect);

                // receive response data from applet
                host.exchangeTheAPDUWithSimulator();
                host.decodeStatus();                //sw1 sw2

                // display response data on app
                displayTheApduResponseOnApp(maxdata_expect);

                // data received from applet
//                byte[] dataOut = host.decodeDataOut();
//                String responseData = new String(dataOut);
//                String[] resp = responseData.split("#");
//                String t0 = resp[0];
//                String t1 = resp[1];
//                String t2 = resp[2];
//                String t3 = resp[3];
//                String t4 = resp[4];
//                String t5 = resp[5];
//
//                txtPatientCode.setText(t0);
//                txtName.setText(t1);
//                txtDOB.setText(t2);
//                txtGender.setText(t3);
//                txtHealthInsurance.setText(t4);
//                txtAddress.setText(t5);
                input = true;

            } else {
                JOptionPane.showMessageDialog(null, "Thẻ đã được sử dụng rồi (đã có data).");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ bằng APDU trước!");
        }
    }//GEN-LAST:event_btn_SendPatientDataActionPerformed

    private void txtDOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDOBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDOBActionPerformed

    private void btnImageBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageBrowserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImageBrowserActionPerformed

    private void btnUpdate_SickNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate_SickNoteActionPerformed
        // TODO add your handling code here:
        if (isConnect_apdu == true) {
            set_patient_sickNote();
            isSickNoteExists = true;

        } else {
            JOptionPane.showMessageDialog(null, "Hãy kết nối tới thẻ và xác thực mã PIN!");
        }
    }//GEN-LAST:event_btnUpdate_SickNoteActionPerformed

    private boolean change_pin() {
        String pin = this.pin_code;

        short datalen = (short) pin.length();                                   // datalen send to applet
        short maxdata_expect = 1;                                               // datalen expect to be received

        byte[] cmds = {APPLET_CLA, CHANGE_PIN, (byte) 0x00, (byte) 0x00};
        host.setTheAPDUCommands(cmds);
        host.setTheDataLengthShort(datalen);

        byte[] data_u = pin.getBytes();
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(maxdata_expect);

        displayTheApduCommandOnApp_beta(cmds, data_u, datalen, maxdata_expect);

        // data receive from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();
        displayTheApduResponseOnApp(maxdata_expect);
        byte[] dataOut = host.decodeDataOut();

        // success == 0 else failed != 0
        if (dataOut[0] == (byte) 0x00) {
            return true;
        } else {
            return false;
        }
    }

    private void update_patient_balance() {
        int balance = patient.getSoDu();
        String balanceStr = String.valueOf(balance);

        byte data_len = (byte) balanceStr.length();                         // data len which send to applet
        byte maxdata_expect = 65;                                           // data expect receive max length (Le)
        byte[] cmds = {APPLET_CLA, SET_PATIENT_BALANCE, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmds);                                       //set APDU header
        host.setTheDataLength(data_len);                                     //LC

        // sender data array == RID,PIX
        byte[] data = balanceStr.getBytes();
        host.setTheDataIn(data);                                            // start send data to applet
        host.setExpectedShortLength(maxdata_expect);                         //LE

        // display data on app
        displayTheApduCommandOnApp_beta(cmds, data, data_len, maxdata_expect);

        // receive response data from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();                //sw1 sw2

        // display response data on app
        displayTheApduResponseOnApp(maxdata_expect);

//        byte[] dataReceive = host.decodeDataOut();          // decode the data from applet
//        String dataOutput = new String(dataReceive);
//        String[] dataArr = dataOutput.split("#");
//        String dataArr0 = dataArr[0];
//        txtBalance.setText(dataArr0);
    }

    private void get_patient_balance() {
        short data_len = 1;                 // data len send to applet
        short maxdata_expect = 65;          // data len expect to be receive (LE)

        byte[] cmds = {APPLET_CLA, GET_PATIENT_BALANCE, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmds);
        host.setTheDataLengthShort(data_len);

        byte[] data_u = {(byte) 0};
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(maxdata_expect);     // Le

        displayTheApduCommandOnApp_beta(cmds, data_u, data_len, maxdata_expect);

        // data receive from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();
        displayTheApduResponseOnApp(maxdata_expect);

        byte[] dataReceive = host.decodeDataOut();          // decode the data from applet
        String dataOutput = new String(dataReceive);
        String[] dataArr = dataOutput.split("#");
        String dataArr0 = dataArr[0];

        DecimalFormat formatter = new DecimalFormat("###,###,###");
        txtBalance.setText(formatter.format(Integer.parseInt(dataArr0)));
    }

    private void set_patient_sickNote() {
        String benhan = txtBA.getText();

        // save benhan to Patient object
        patient.setBenhAn(benhan);

        int benhan_len = benhan.length();
        byte data_len = (byte) benhan_len;                                 // data len which send to applet
        byte maxdata_expect = 65;                                          // data expect receive max length (Le)
        byte[] cmds = {APPLET_CLA, SET_PATIENT_SICKNOTE, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmds);                                       //set APDU header
        host.setTheDataLength(data_len);                                     //LC

        // sender data array == RID,PIX
        byte[] data = benhan.getBytes();
        host.setTheDataIn(data);                                            // start send data to applet
        host.setExpectedShortLength(maxdata_expect);                         //LE

        // display data on app
        displayTheApduCommandOnApp_beta(cmds, data, data_len, maxdata_expect);

        // receive response data from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();                //sw1 sw2

        // display response data on app
        displayTheApduResponseOnApp(maxdata_expect);
//
//        byte[] dataReceive = host.decodeDataOut();          // decode the data from applet
//        String dataOutput = new String(dataReceive);
//        String[] dataArr = dataOutput.split("#");
//        String dataArr0 = dataArr[0];
//        txtBA.setText(dataArr0);
    }

    private void update_patient_information() {

        String mabenhnhan = txtPatientCode.getText();
        String hoten = txtName.getText();
        String ngaysinh = txtDOB.getText();
        String gioitinh = txtGender.getText();
        String soBHYT = txtHealthInsurance.getText();
        String quequan = txtAddress.getText();

        String maPIN = patient.getMaPIN();

        patient.setMaBenhNhan(mabenhnhan);
        patient.setHoten(hoten);
        patient.setNgaysinh(ngaysinh);
        patient.setGioitinh(gioitinh);
        patient.setSoBHYT(soBHYT);
        patient.setQuequan(quequan);

        String dataArraySender = mabenhnhan.concat("#")
                .concat(hoten).concat("#")
                .concat(ngaysinh).concat("#")
                .concat(gioitinh).concat("#")
                .concat(soBHYT).concat("#")
                .concat(quequan).concat("#")
                .concat(maPIN);
        System.out.println(dataArraySender);

        int sender_len = dataArraySender.length();

        byte datalen = (byte) sender_len;                                   // data len which send to applet
        byte maxdata_expect = 127;                                          // data expect receive max length (Le)
        byte[] cmd = {APPLET_CLA, UPDATE_PATIENT_INFOR, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmd);                                       //set APDU header
        host.setTheDataLength(datalen);                                     //LC

        // sender data array == RID,PIX
        byte[] data = dataArraySender.getBytes();
        host.setTheDataIn(data);                                            // start send data to applet
        host.setExpectedByteLength(maxdata_expect);                         //LE

        // display data on app
        displayTheApduCommandOnApp(cmd, data, datalen, maxdata_expect);

        // receive response data from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();                //sw1 sw2

        // display response data on app
        displayTheApduResponseOnApp(maxdata_expect);
    }

    private void get_patient_sickNote() {
        short data_len = 1;                 // data len send to applet
        short maxdata_expect = 65;          // data len expect to be receive (LE)

        byte[] cmds = {APPLET_CLA, GET_PATIENT_SICKNOTE, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmds);
        host.setTheDataLengthShort(data_len);

        byte[] data_u = {(byte) 0};
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(maxdata_expect);     // Le

        displayTheApduCommandOnApp_beta(cmds, data_u, data_len, maxdata_expect);

        // data receive from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();
        displayTheApduResponseOnApp(maxdata_expect);

        byte[] dataReceive = host.decodeDataOut();          // decode the data from applet
        String dataOutput = new String(dataReceive);
        String[] dataArr = dataOutput.split("#");
        String dataArr0 = dataArr[0];
        txtBA.setText(dataArr0);
    }

    private void get_patient_information() {
        short data_len = 1;                 // data len send to applet
        short maxdata_expect = 200;         // data len expect to be receive (LE)

        byte[] cmds = {APPLET_CLA, GET_PATIENT_INFOR, (byte) 0x00, (byte) 0x00};

        host.setTheAPDUCommands(cmds);                  // APDU header
        host.setTheDataLengthShort(data_len);           // LC

        // data sent array is RID, PIX
        byte[] data_u = {(byte) 0};
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(maxdata_expect);     // Le

        displayTheApduCommandOnApp_beta(cmds, data_u, data_len, maxdata_expect);

        host.exchangeTheAPDUWithSimulator();            // get the response data
        host.decodeStatus();                            // SW1, SW2

        displayTheApduResponseOnApp(maxdata_expect);

        byte[] dataReceive = host.decodeDataOut();          // decode the data from applet
        String dataOutput = new String(dataReceive);
        String[] out = dataOutput.split("#");
        String out0 = out[0];
        String out1 = out[1];
        String out2 = out[2];
        String out3 = out[3];
        String out4 = out[4];
        String out5 = out[5];

        txtPatientCode.setText(out0);
        txtName.setText(out1);
        txtDOB.setText(out2);
        txtGender.setText(out3);
        txtHealthInsurance.setText(out4);
        txtAddress.setText(out5);

        // get the sick, balance
        if (isSickNoteExists == true) {
            get_patient_sickNote();
        }
        if (isBalanceExists == true) {
            get_patient_balance();
        }

    }

    private boolean check_PIN_code() {
        String pin = this.pin_code;

        short datalen = (short) pin.length();                                   // datalen send to applet
        short maxdata_expect = 1;                                               // datalen expect to be received

        byte[] cmds = {APPLET_CLA, CHECK_PIN, (byte) 0x00, (byte) 0x00};
        host.setTheAPDUCommands(cmds);
        host.setTheDataLengthShort(datalen);

        byte[] data_u = pin.getBytes();
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(maxdata_expect);

        displayTheApduCommandOnApp_beta(cmds, data_u, datalen, maxdata_expect);

        // data receive from applet
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();
        displayTheApduResponseOnApp(maxdata_expect);
        byte[] dataOut = host.decodeDataOut();

        // success == 0 else != 0
        if (dataOut[0] == (byte) 0x00) {
            return true;
        } else {
            return false;
        }
    }

    private boolean check_isBlock_card() {
        // data send to applet + data expect receive
        short data_len = 1;
        short max_data_expect = 1;

        byte[] command = {APPLET_CLA, CKECK_CARD_STATUS, (byte) 0x00, (byte) 0x00};
        host.setTheAPDUCommands(command);
        host.setTheDataLengthShort(data_len);

        byte[] data_u = {(byte) 0};
        host.setTheDataIn(data_u);
        host.setExpectedShortLength(max_data_expect);

        // display the send data to applet on app
        displayTheApduCommandOnApp_beta(command, data_u, data_len, max_data_expect);

        // receive and display the response data
        host.exchangeTheAPDUWithSimulator();
        host.decodeStatus();
        displayTheApduResponseOnApp(max_data_expect);

        byte[] dataOut = host.decodeDataOut();

        // isBlock == 1  else not block == 0
        if (dataOut[0] == (byte) 0x00) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avatar_image;
    private javax.swing.JButton btnChangePIN;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnImageBrowser;
    private javax.swing.JButton btnInputCard;
    private javax.swing.JButton btnReleaseConnection;
    private javax.swing.JButton btnResetCard;
    private javax.swing.JButton btnUnblockCard;
    private javax.swing.JButton btnUpdateInfor;
    private javax.swing.JButton btnUpdate_SickNote;
    private javax.swing.JButton btn_Payment;
    private javax.swing.JButton btn_SendPatientData;
    private javax.swing.JButton btn_debit;
    private javax.swing.JButton btn_init_patient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextArea txtApduData;
    private javax.swing.JTextArea txtBA;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtCLA;
    private javax.swing.JTextField txtConnectStatus;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtHealthInsurance;
    private javax.swing.JTextField txtINS;
    private javax.swing.JTextField txtLC;
    private javax.swing.JTextField txtLE;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtP1;
    private javax.swing.JTextField txtP2;
    private javax.swing.JTextField txtPatientCode;
    private javax.swing.JTextField txtReleaseStatus;
    private javax.swing.JTextArea txtResponseData;
    private javax.swing.JTextField txtSW1;
    private javax.swing.JTextField txtSW2;
    // End of variables declaration//GEN-END:variables
}
